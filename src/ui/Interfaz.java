package ui;

import core.*;
import java.awt.Component;
import java.awt.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author juan
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        this.tablaReconToggle.setVisible(false);
        this.tablaReconToggle.setText("Volver a tabla M");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        DirField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TGramaticas = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        TPrimSig = new javax.swing.JTextArea();
        InputField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Grid = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tablaReconToggle = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel1.setText("Laboratorio 2 - Eduardo Angulo, Juan Gómez, Camila Lozano");

        jLabel2.setText("Seleccione  archivo: ");

        DirField.setEditable(false);

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TGramaticas.setColumns(20);
        TGramaticas.setFont(new java.awt.Font("Liberation Mono", 0, 15)); // NOI18N
        TGramaticas.setRows(5);
        jScrollPane1.setViewportView(TGramaticas);

        TPrimSig.setColumns(20);
        TPrimSig.setFont(new java.awt.Font("Liberation Mono", 0, 15)); // NOI18N
        TPrimSig.setRows(5);
        jScrollPane2.setViewportView(TPrimSig);

        InputField.setToolTipText("");

        jButton2.setText("Correr");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Grid.setFont(new java.awt.Font("Liberation Mono", 0, 14)); // NOI18N
        Grid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(Grid);

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Gramáticas:");
        jLabel3.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("Primeros y siguientes:");
        jLabel4.setToolTipText("");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel5.setText("Tabla M:");
        jLabel5.setToolTipText("");

        tablaReconToggle.setSelected(true);
        tablaReconToggle.setText("Ver Tabla M");
        tablaReconToggle.setToolTipText("");
        tablaReconToggle.setActionCommand("");
        tablaReconToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablaReconToggleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addComponent(DirField, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(InputField, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(262, 262, 262)
                                .addComponent(jLabel4)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tablaReconToggle)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(DirField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(tablaReconToggle)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser FC = new JFileChooser();
        FC.showSaveDialog(null);
        File F = FC.getSelectedFile();
        String Address = F.getAbsolutePath();
        DirField.setText(Address);
        
        TGramaticas.setText(null);
        TPrimSig.setText(null);
        
        ArrayList<Object> data;
        try {
            data = readFile(Address);
            ArrayList<Symbol> auxNoTerms = (ArrayList<Symbol>) data.get(0);
            ArrayList<ArrayList<Production>> auxProds = (ArrayList<ArrayList<Production>>) data.get(1);
            getInitGram(auxNoTerms, auxProds);

            TGramaticas.append("Gramatica Inicial \n \n");
            printGram1(initNoTerms, initProds);

            //Inicio Eliminar Recursividad
            for (int i = 0; i < auxNoTerms.size(); i += 2) {
                Symbol auxNT = auxNoTerms.get(i);
                ArrayList<Production> auxP = auxProds.get(i);
                if(isRecursive(auxNT, auxP)){
                    auxNoTerms.set(i+1, new Symbol(auxNT + "'", true));
                    ArrayList<ArrayList<Production>> alphaBeta = getAlphaBeta(auxNT, auxP);
                    ArrayList<ArrayList<Production>> newProd = elimRecursive(auxNoTerms.get(i+1), alphaBeta.get(0), alphaBeta.get(1));
                    auxProds.set(i, newProd.get(0));
                    auxProds.set(i+1, newProd.get(1));
                }
            }
            //Fin Eliminar Recursividad

            //Inicio Factorizar
            for (int i = 0; i < auxNoTerms.size(); i++) {
                Symbol auxNT = auxNoTerms.get(i);
                ArrayList<Production> auxP = auxProds.get(i);
                if(!auxNT.getSymb().equals("-")){
                    if(isFactorizable(auxP)){
                        auxNoTerms.set(i+1, new Symbol(auxNT + "'", true));
                        ArrayList<ArrayList<Production>> newProd = factorize(auxNoTerms.get(i+1), auxP);
                        auxProds.set(i, newProd.get(0));
                        auxProds.set(i+1, newProd.get(1));
                    }
                }
            }
            //Fin Factorizar

            getFinalGram(auxNoTerms, auxProds);

            TGramaticas.append("Gramatica Final \n \n");
            printGram1(noTerms, prods);

            getTerminals();
            setSwitchs();

            System.out.println("Terminales");
            printTerms();

            getPrim();
            getSgte();
            printPrimSgte();

            //defaultPrimSgte1();
            getMTable2();

            //defaultMTable();
            printMTable();
            tableGraphics();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
               
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.tablaReconToggle.setVisible(true);
        this.tablaReconToggle.setSelected(true);
        displayRecon();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void displayRecon()
    {
        ArrayList<String> salida = identify(InputField.getText());
        
        DefaultTableModel m = new DefaultTableModel();
        m.setColumnCount(3);
        m.setRowCount(salida.size()-1);
        Grid.setModel(m);
        JTableHeader th = Grid.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        String[] Header = salida.get(0).split("\\|");
        for (int i = 0; i < 3; i++) {            
            tcm.getColumn(i).setHeaderValue(Header[i]);
        }
        salida.remove(0);
        th.repaint();
        for (int i = 0; i < salida.size(); i++) {
            String[] row = salida.get(i).split("\\|");
            for (int j = 0; j < 3; j++) {
                Grid.setValueAt(row[j],i,j);
            }
        }
        columnFitter();
    }
    
    private void tablaReconToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablaReconToggleActionPerformed
        // TODO add your handling code here:
        if(this.tablaReconToggle.isSelected())
        {
            //Mostrar tabla de recon
            this.tablaReconToggle.setText("Ver Tabla M");
            displayRecon();
        }
        else
        {
            //Mostrar tabla M
            this.tablaReconToggle.setText("Ver Tabla de Reconocimiento");
            tableGraphics();
        }
    }//GEN-LAST:event_tablaReconToggleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
                
                
            }
        });
        
    }
    
    public  final Symbol EPS = new Symbol("&", false);
    public  final Symbol END = new Symbol("$", false);
    public  ArrayList<Symbol> initNoTerms;
    public  ArrayList<ArrayList<Production>> initProds;
    public  ArrayList<Symbol> noTerms;
    public  ArrayList<ArrayList<Production>> prods;
    public  ArrayList<Symbol> terms;
    public  ArrayList<ArrayList<Symbol>> primero;
    public  ArrayList<ArrayList<Symbol>> siguiente;
    public  Production[][] mTable;
    
    //Leer Archivo
    public  ArrayList<Object> readFile(String filepath) throws FileNotFoundException, IOException{
        BufferedReader br = new BufferedReader(new FileReader(filepath));
        ArrayList<Object> data = new ArrayList<>();
        ArrayList<Symbol> auxNoTerms = new ArrayList<>();
        ArrayList<ArrayList<Production>> auxProds = new ArrayList<>();
        while(br.ready()){
            String line = br.readLine();
            Symbol term = new Symbol("" + line.charAt(0), true);
            String auxP = line.substring(3, line.length());
            Production prod = new Production();
            for (int i = 0; i < auxP.length(); i++) {
                prod.addSymbol(new Symbol("" + auxP.charAt(i), false));
            }
            if(!arrayContains(auxNoTerms, term)){
                auxNoTerms.add(term);
                auxNoTerms.add(new Symbol("-", false));
                auxProds.add(new ArrayList<>());
                auxProds.add(new ArrayList<>());
            }
            auxProds.get(auxNoTerms.indexOf(symbolOf(auxNoTerms, term))).add(prod);
        }
        data.add(auxNoTerms);
        data.add(auxProds);
        return data;
    }
    
    //Obtener Gramatica Inicial
    public  void getInitGram(ArrayList<Symbol> noTerms, ArrayList<ArrayList<Production>> prods){
        initNoTerms = new ArrayList<>();
        initProds = new ArrayList<>();
        for (int i = 0; i < noTerms.size(); i++) {
            if(!noTerms.get(i).getSymb().equals("-")){
                initNoTerms.add(noTerms.get(i));
                initProds.add(prods.get(i));
            }
        }
    }
    
    //Obtener Gramatica Final
    public  void getFinalGram(ArrayList<Symbol> noTerm, ArrayList<ArrayList<Production>> prod){
        noTerms = new ArrayList<>();
        prods = new ArrayList<>();
        for (int i = 0; i < noTerm.size(); i++) {
            if(!noTerm.get(i).getSymb().equals("-")){
                noTerms.add(noTerm.get(i));
                prods.add(prod.get(i));
            }
        }
    }
    
    //Obtener Terminales
    public  void getTerminals(){
        terms = new ArrayList<>();
        for (ArrayList<Production> prod : prods) {
            for (Production prod1 : prod) {
                for (Symbol symb : prod1.getProd()) {
                    if(!arrayContains(noTerms, symb) && !symb.getSymb().equals(EPS.getSymb()) && !arrayContains(terms, symb)){
                        terms.add(symb);
                    }
                }
            }
        }
        terms.add(END);
    }
    
    //Set Symbol.NoTerm
    public  void setSwitchs(){
        for (ArrayList<Production> prod : prods) {
            for (Production prod1 : prod) {
                for (int i = 0; i < prod1.getProd().size(); i++) {
                    if(arrayContains(noTerms, prod1.getSymbol(i))){
                        prod1.getSymbol(i).setNoTerm(true);
                    }
                }
            }
        }
    }
    
    //Imprimir Terminales
    public  void printTerms(){
        String out = "[";
        for (int i = 0; i < terms.size()-1; i++) {
            out += terms.get(i).getSymb() + ", ";
        }
        out += terms.get(terms.size()-1).getSymb() + "]";
        System.out.println(out + "\n");
    }
    
    //Imprimir Gramatica V1
    public  void printGram1(ArrayList<Symbol> noTerms, ArrayList<ArrayList<Production>> prods){
        for (int i = 0; i < noTerms.size(); i++) {
            String out;
            if(noTerms.get(i).getSymb().length() > 1){
                out = noTerms.get(i).getSymb() + " -> ";
            }else{
                out = noTerms.get(i).getSymb() + "  -> ";
            }
            for (int j = 0; j < prods.get(i).size()-1; j++) {
                out += prods.get(i).get(j).toString() + " | ";
            }
            out += prods.get(i).get(prods.get(i).size()-1).toString();
            TGramaticas.append(out+"\n");
        }
        TGramaticas.append("\n");
    }
    
    //Imprimir Gramatica V2
    public  void printGram2(ArrayList<Symbol> noTerms, ArrayList<ArrayList<Production>> prods){
        for (int i = 0; i < noTerms.size(); i++) {
            for (int j = 0; j < prods.get(i).size(); j++) {
                System.out.println(noTerms.get(i).getSymb() + " -> " + prods.get(i).get(j).toString());
            }
        }
        System.out.println("");
    }
    
    //Array Contains
    public  boolean arrayContains(ArrayList<Symbol> noTerms, Symbol term){
        for (Symbol noTerm : noTerms) {
            if(term.getSymb().equals(noTerm.getSymb())){
                return true;
            }
        }
        return false;
    }
    
    //Real Symbol Of
    public  Symbol symbolOf(ArrayList<Symbol> noTerms, Symbol term){
        for (Symbol noTerm : noTerms) {
            if(term.getSymb().equals(noTerm.getSymb())){
                return noTerm;
            }
        }
        return EPS;
    }
    
    //Es Recursiva Izquierda
    public  boolean isRecursive(Symbol noTerm, ArrayList<Production> prods){
        for (Production prod : prods) {
            Symbol first = prod.getFirst();
            if(first.getSymb().equals(noTerm.getSymb())){
                return true;
            }
        }
        return false;
    }
    
    //Obtener Alpha y Beta para Recursividad
    public  ArrayList<ArrayList<Production>> getAlphaBeta(Symbol noTerm, ArrayList<Production> prods){
        ArrayList<ArrayList<Production>> data = new ArrayList<>();
        ArrayList<Production> alpha = new ArrayList<>();
        ArrayList<Production> beta = new ArrayList<>();
        for (Production prod : prods) {
            Symbol first = prod.getFirst();
            if(first.getSymb().equals(noTerm.getSymb())){
                Production auxP = new Production();
                for (int i = 1; i < prod.getProd().size(); i++) {
                    auxP.addSymbol(prod.getSymbol(i)); //Qui
                }
                alpha.add(auxP);
            }else{
                beta.add(prod);
            }
        }
        data.add(alpha);
        data.add(beta);
        return data;
    }
    
    //Eliminar Recursividad Basica
    public  ArrayList<ArrayList<Production>> elimRecursive(Symbol noTerm, ArrayList<Production> alpha, ArrayList<Production> beta){
        ArrayList<ArrayList<Production>> data = new ArrayList<>();
        ArrayList<Production> prods1 = new ArrayList<>();
        ArrayList<Production> prods2 = new ArrayList<>();
        for (Production b : beta) {
            Production auxB = new Production();
            for (Symbol symb : b.getProd()) {
                if(!symb.getSymb().equals(EPS.getSymb())){
                    auxB.addSymbol(symb);
                }
            }
            auxB.addSymbol(noTerm);
            prods1.add(auxB);
        }
        for (Production a : alpha) {
            a.addSymbol(noTerm);
            prods2.add(a);
        }
        Production epsP = new Production();
        epsP.addSymbol(EPS);
        prods2.add(epsP);
        data.add(prods1);
        data.add(prods2);
        return data;
    }
    
    //Es Factorizable
    public  boolean isFactorizable(ArrayList<Production> prods){
        for (int i = 0; i < prods.size(); i++) {
            for (int j = i+1; j < prods.size(); j++) {
                if(prods.get(i).getFirst().getSymb().equals(prods.get(j).getFirst().getSymb())){
                    return true;
                }
            }
        }
        return false;
    }
    
    //Obtener Prefijo Inicial
    public  Symbol getInitPrefix(ArrayList<Production> prods){
        for (int i = 0; i < prods.size(); i++) {
            for (int j = i+1; j < prods.size(); j++) {
                if(prods.get(i).getFirst().getSymb().equals(prods.get(j).getFirst().getSymb())){
                    return prods.get(i).getFirst();
                }
            }
        }
        return EPS;
    }
    
    //Existe Siguiente Prefijo
    public  boolean nextPrefix(ArrayList<Production> alpha, int index){
        for (int i = 0; i < alpha.size()-1; i++) {
            if(!alpha.get(i).getSymbol(index).getSymb().equals(alpha.get(i+1).getSymbol(index).getSymb())){
                return false;
            }
        }
        return true;
    }
    
    //Factorizacion Basica
    public  ArrayList<ArrayList<Production>> factorize(Symbol noTerm, ArrayList<Production> prods){
        ArrayList<ArrayList<Production>> data = new ArrayList<>();
        ArrayList<Production> prods1 = new ArrayList<>();
        ArrayList<Production> prods2 = new ArrayList<>();
        ArrayList<Production> alpha = new ArrayList<>();
        ArrayList<Production> gamma = new ArrayList<>();
        Symbol prefix = getInitPrefix(prods);
        int min = Integer.MAX_VALUE;
        for (Production prod : prods) {
            if(prefix.getSymb().equals(prod.getFirst().getSymb())){
                alpha.add(prod);
                if(prod.getProd().size() < min){
                    min = prod.getProd().size();
                }
            }else{
                gamma.add(prod);
            }
        }
        boolean sw = true;
        int index = 1;
        Production prefixProd = new Production();
        prefixProd.addSymbol(prefix);
        while (sw && index < min) {
            if(nextPrefix(alpha, index)){
                prefixProd.addSymbol(alpha.get(0).getSymbol(index));
            }else{
                sw = false;
            }
            index++;
        }
        for (Production alpha1 : alpha) {
            if(alpha1.getProd().size() == prefixProd.getProd().size()){
                Production epsP = new Production();
                epsP.addSymbol(EPS);
                prods2.add(epsP);
            }else{
                Production auxP = new Production();
                for (int i = prefixProd.getProd().size(); i < alpha1.getProd().size(); i++) {
                    auxP.addSymbol(alpha1.getSymbol(i)); //Qui
                }
                prods2.add(auxP);
            }
        }
        prefixProd.addSymbol(noTerm);
        prods1.add(prefixProd);
        for (Production gamma1 : gamma) {
            prods1.add(gamma1);
        }
        data.add(prods1);
        data.add(prods2);
        return data;
    }
    
    //Obtener Primeros
    public  void getPrim(){
        primero = new ArrayList<>();
        int n = noTerms.size();
        for (int i = 0; i < n; i++) {
            primero.add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            ArrayList<Symbol> aux = getPrimNoTerm(prods.get(i));
            for (Symbol aux1 : aux) {
                primero.get(i).add(aux1);
            }
        }
    }
    
    //Obtener el Primero de un No Terminal
    public  ArrayList<Symbol> getPrimNoTerm(ArrayList<Production> prodNT){
        ArrayList<Symbol> result = new ArrayList<>();
        for (Production prod : prodNT) {
            boolean sw = false;
            int i = 0;
            while(!sw && i < prod.getProd().size()){
                ArrayList<Symbol> aux = new ArrayList<>();
                if(prod.getSymbol(i).getNoTerm()){
                    ArrayList<Production> a = prods.get(noTerms.indexOf(symbolOf(noTerms, prod.getSymbol(i))));
                    aux = getPrimNoTerm(a);
                    if(!arrayContains(aux, EPS)){
                        sw = true;
                    }
                }else{
                    sw = true;
                    aux.add(prod.getSymbol(i));
                }
                i++;
                result = union(result, aux);
            }
        }
        return result;
    }
    
    //Obtener Siguientes
    public  void getSgte(){
        siguiente = new ArrayList<>();
        int n = noTerms.size();
        for (int i = 0; i < n; i++) {
            siguiente.add(new ArrayList<>());
        }
        siguiente.get(0).add(END);
        for (int i = 0; i < 2; i++) {
            rule2();
            rule3i();
            rule3ii();
        }
    }
    
    //Regla 2 (Arreglar?)
    public  void rule2(){
        for (ArrayList<Production> prod : prods) {
            for (Production prod1 : prod) {
                int noT = 0;
                ArrayList<Integer> indexs = new ArrayList<>();
                for (int i = 0; i < prod1.getProd().size(); i++) {
                    if(prod1.getSymbol(i).getNoTerm()){
                        noT++;
                        indexs.add(i);
                    }
                }
                for (int i = 0; i < noT; i++) {
                    int index = indexs.get(i);
                    Symbol noTerm = prod1.getSymbol(index);
                    if(index != prod1.getProd().size() - 1){
                        Production beta = new Production();
                        for (int j = index + 1; j < prod1.getProd().size(); j++) {
                            beta.addSymbol(prod1.getSymbol(j));
                        }
                        ArrayList<Symbol> aux1 = primProd(beta);
                        for (Symbol aux11 : aux1) {
                            if(!aux11.getSymb().equals(EPS.getSymb()) && !arrayContains(siguiente.get(noTerms.indexOf(symbolOf(noTerms, noTerm))), aux11)){
                                siguiente.get(noTerms.indexOf(symbolOf(noTerms, noTerm))).add(aux11);
                            }
                        }
                        while(beta.getProd().size() != 1 && !aux1.isEmpty() && arrayContains(aux1, EPS)){
                            beta.getProd().remove(0);
                            aux1 = primProd(beta);
                            for (Symbol aux11 : aux1) {
                                if(!aux11.getSymb().equals(EPS.getSymb()) && !arrayContains(siguiente.get(noTerms.indexOf(symbolOf(noTerms, noTerm))), aux11)){
                                    siguiente.get(noTerms.indexOf(symbolOf(noTerms, noTerm))).add(aux11);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    //Regla 3i
    public  void rule3i(){
        for (int i = 0; i < prods.size(); i++) {
            ArrayList<Production> prod = prods.get(i);
            for (Production prod1 : prod) {
                Symbol last = prod1.getLast();
                if(last.getNoTerm()){
                    for (Symbol symb: siguiente.get(i)) {
                        if(!arrayContains(siguiente.get(noTerms.indexOf(symbolOf(noTerms, last))), symb)){
                            siguiente.get(noTerms.indexOf(symbolOf(noTerms, last))).add(symb);
                        }
                    }
                }
            }
        }
    }
    
    //Regla 3ii (Arreglar? (Verify))
    public  void rule3ii(){
        for (int i = 0; i < prods.size(); i++) {
            ArrayList<Production> prod = prods.get(i);
            for (Production prod1 : prod) {
                int noT = 0;
                ArrayList<Integer> indexs = new ArrayList<>();
                for (int j = 0; j < prod1.getProd().size(); j++) {
                    if(prod1.getSymbol(j).getNoTerm()){
                        noT++;
                        indexs.add(j);
                    }
                }
                for (int j = 0; j < noT; j++) {
                    int index = indexs.get(j);
                    Symbol noTerm = prod1.getSymbol(index);
                    if(index != prod1.getProd().size() - 1){
                        Production beta = new Production();
                        for (int k = index + 1; k < prod1.getProd().size(); k++) {
                            beta.addSymbol(prod1.getSymbol(k));
                        }
                        ArrayList<Symbol> aux1 = primProd(beta);
                        if(arrayContains(aux1, EPS)){
                            if(verifySgte(beta)){
                                for (Symbol symb: siguiente.get(i)) {
                                    if(!arrayContains(siguiente.get(noTerms.indexOf(symbolOf(noTerms, noTerm))), symb)){
                                        siguiente.get(noTerms.indexOf(symbolOf(noTerms, noTerm))).add(symb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    //Union de ArrayList<Symbol>
    public  ArrayList<Symbol> union(ArrayList<Symbol> arr1, ArrayList<Symbol> arr2){
        ArrayList<Symbol> result = new ArrayList<>();
        for (Symbol arr11 : arr1) {
            result.add(arr11);
        }
        for (Symbol arr21 : arr2) {
            if(!arrayContains(result, arr21)){
                result.add(arr21);
            }
        }
        return result;
    }
    
    //Imprimir Primero y Siguiente
    public  void printPrimSgte(){
        int n = noTerms.size();
        TPrimSig.append("Primeros \n \n");
        for (int i = 0; i < n; i++) {
            String out;
            if(noTerms.get(i).getSymb().length() > 1){
                out = "P(" + noTerms.get(i).getSymb() + ") = [";
            }else{
                out = "P(" + noTerms.get(i).getSymb() + ")  = [";
            }
            
            for (int j = 0; j < primero.get(i).size()-1; j++) {
                out += primero.get(i).get(j).getSymb() + ", ";
            }
            out += primero.get(i).get(primero.get(i).size()-1) + "]";
            TPrimSig.append(out+"\n");
        }
        TPrimSig.append("\nSiguientes \n \n");
        for (int i = 0; i < n; i++) {
            String out;
            if(noTerms.get(i).getSymb().length() > 1){
                out = "S(" + noTerms.get(i).getSymb() + ") = [";
            }else{
                out = "S(" + noTerms.get(i).getSymb() + ")  = [";
            }
            
            for (int j = 0; j < siguiente.get(i).size()-1; j++) {
                out += siguiente.get(i).get(j).getSymb() + ", ";
            }
            out += siguiente.get(i).get(siguiente.get(i).size()-1) + "]";
            TPrimSig.append(out+"\n");
        }
        TPrimSig.append("\n");
    }
    
    //Primeros y Siguientes de Ejemplo 1
    public  void defaultPrimSgte1(){
        primero = new ArrayList<>();
        siguiente = new ArrayList<>();
        int n = noTerms.size();
        for (int i = 0; i < n; i++) {
            primero.add(new ArrayList<>());
            siguiente.add(new ArrayList<>());
        }
        primero.get(0).add(terms.get(2));
        primero.get(0).add(terms.get(3));
        primero.get(1).add(terms.get(0));
        primero.get(1).add(EPS);
        primero.get(2).add(terms.get(2));
        primero.get(2).add(terms.get(3));
        primero.get(3).add(terms.get(1));
        primero.get(3).add(EPS);
        primero.get(4).add(terms.get(2));
        primero.get(4).add(terms.get(3));
        siguiente.get(0).add(END);
        siguiente.get(0).add(terms.get(4));
        siguiente.get(1).add(END);
        siguiente.get(1).add(terms.get(4));
        siguiente.get(2).add(END);
        siguiente.get(2).add(terms.get(4));
        siguiente.get(2).add(terms.get(0));
        siguiente.get(3).add(END);
        siguiente.get(3).add(terms.get(4));
        siguiente.get(3).add(terms.get(0));
        siguiente.get(4).add(END);
        siguiente.get(4).add(terms.get(4));
        siguiente.get(4).add(terms.get(0));
        siguiente.get(4).add(terms.get(1));
        System.out.println("Primeros");
        for (int i = 0; i < n; i++) {
            String out = "P(" + noTerms.get(i).getSymb() + ") = [";
            for (int j = 0; j < primero.get(i).size()-1; j++) {
                out += primero.get(i).get(j).getSymb() + ", ";
            }
            out += primero.get(i).get(primero.get(i).size()-1) + "]";
            System.out.println(out);
        }
        System.out.println("\nSiguientes");
        for (int i = 0; i < n; i++) {
            String out = "S(" + noTerms.get(i).getSymb() + ") = [";
            for (int j = 0; j < siguiente.get(i).size()-1; j++) {
                out += siguiente.get(i).get(j).getSymb() + ", ";
            }
            out += siguiente.get(i).get(siguiente.get(i).size()-1) + "]";
            System.out.println(out);
        }
        System.out.println("");
    }
    
    //Primeros y Siguientes de Ejemplo 2
    public  void defaultPrimSgte2(){
        primero = new ArrayList<>();
        siguiente = new ArrayList<>();
        int n = noTerms.size();
        for (int i = 0; i < n; i++) {
            primero.add(new ArrayList<>());
            siguiente.add(new ArrayList<>());
        }
        primero.get(0).add(terms.get(0));
        primero.get(0).add(terms.get(2));
        primero.get(1).add(terms.get(0));
        primero.get(1).add(terms.get(2));
        primero.get(2).add(terms.get(3));
        primero.get(2).add(EPS);
        siguiente.get(0).add(END);
        siguiente.get(0).add(terms.get(1));
        siguiente.get(0).add(terms.get(3));
        siguiente.get(1).add(terms.get(1));
        siguiente.get(2).add(terms.get(1));
        System.out.println("Primeros");
        for (int i = 0; i < n; i++) {
            String out = "P(" + noTerms.get(i).getSymb() + ") = [";
            for (int j = 0; j < primero.get(i).size()-1; j++) {
                out += primero.get(i).get(j).getSymb() + ", ";
            }
            out += primero.get(i).get(primero.get(i).size()-1) + "]";
            System.out.println(out);
        }
        System.out.println("\nSiguientes");
        for (int i = 0; i < n; i++) {
            String out = "S(" + noTerms.get(i).getSymb() + ") = [";
            for (int j = 0; j < siguiente.get(i).size()-1; j++) {
                out += siguiente.get(i).get(j).getSymb() + ", ";
            }
            out += siguiente.get(i).get(siguiente.get(i).size()-1) + "]";
            System.out.println(out);
        }
        System.out.println("");
    }
    
    //Obtener el Primero de una Produccion
    public  ArrayList<Symbol> primProd(Production p){
        ArrayList<Symbol> prim = new ArrayList<>();
        Symbol first = p.getFirst();
        if(!arrayContains(noTerms, first)){
            prim.add(first);
        }else{
            int index = noTerms.indexOf(symbolOf(noTerms, first));
            for (Symbol get : primero.get(index)) {
                prim.add(get);
            }
        }
        return prim;
    }
    
    //Verificar si Alpha deriva a Epsilon en 0 o mas pasos
    public  boolean verifySgte(Production p){
        for (int i = 1; i < p.getProd().size(); i++) {
            if(arrayContains(noTerms, p.getSymbol(i))){
                if(!arrayContains(primero.get(noTerms.indexOf(symbolOf(noTerms, p.getSymbol(i)))), EPS)){
                    return false;
                }
            }else{
                return false;
            }
        }
        return true;
    }
    
    //Obtener Tabla M (Error?)
    public  void getMTable(){
        int fil = noTerms.size();
        int col = terms.size();
        mTable = new Production[fil][col];
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                mTable[i][j] = new Production();
            }
        }
        for (int i = 0; i < prods.size(); i++) {
            ArrayList<Production> prod = prods.get(i);
            for (Production prod1 : prod) {
                ArrayList<Symbol> prim = primProd(prod1);
                if(!arrayContains(prim, EPS)){
                    for (Symbol prim1 : prim) {
                        int index = terms.indexOf(symbolOf(terms, prim1));
                        mTable[i][index] = prod1;
                    }
                }else{
                    if(verifySgte(prod1)){
                        ArrayList<Symbol> sgte = siguiente.get(i);
                        for (Symbol sgte1 : sgte) {
                            int index = terms.indexOf(symbolOf(terms, sgte1));
                            mTable[i][index] = prod1;
                        }
                    }else{
                        for (Symbol prim1 : prim) {
                            if(!prim1.getSymb().equals(EPS.getSymb())){
                                int index = terms.indexOf(symbolOf(terms, prim1));
                                mTable[i][index] = prod1;
                            }
                        }
                    }
                }
            }
        }
    }
    
    //Obtener Tabla M (Non So?)
    public  void getMTable2(){
        int fil = noTerms.size();
        int col = terms.size();
        mTable = new Production[fil][col];
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                mTable[i][j] = new Production();
            }
        }
        for (int i = 0; i < prods.size(); i++) {
            ArrayList<Production> prod = prods.get(i);
            for (Production prod1 : prod) {
                ArrayList<Symbol> prim = primProd(prod1);
                if(arrayContains(prim, EPS)){
                    if(verifySgte(prod1)){
                        ArrayList<Symbol> sgte = siguiente.get(i);
                        for (Symbol sgte1 : sgte) {
                            int index = terms.indexOf(symbolOf(terms, sgte1));
                            mTable[i][index] = prod1;
                        }
                    }else{
                        boolean sw = false;
                        int j = 1;
                        while (!sw && j < prod1.getProd().size()) {
                            if(arrayContains(noTerms, prod1.getSymbol(j))){
                                ArrayList<Symbol> aux = primero.get(noTerms.indexOf(symbolOf(noTerms, prod1.getSymbol(j))));
                                if(!arrayContains(aux, EPS)){
                                    for (Symbol aux1 : aux) {
                                        int index = terms.indexOf(symbolOf(terms, aux1));
                                        mTable[i][index] = prod1;
                                    }
                                    sw = true;
                                }else{
                                    for (Symbol aux1 : aux) {
                                        if(!aux1.getSymb().equals(EPS.getSymb())){
                                            int index = terms.indexOf(symbolOf(terms, aux1));
                                            mTable[i][index] = prod1;
                                        }
                                    }
                                }
                            }else{
                                int index = terms.indexOf(symbolOf(terms, prod1.getSymbol(j)));
                                mTable[i][index] = prod1;
                                sw = true;
                            }
                            j++;
                        }
                    }
                }
                for (Symbol prim1 : prim) {
                    if(!prim1.getSymb().equals(EPS.getSymb())){
                        int index = terms.indexOf(symbolOf(terms, prim1));
                        mTable[i][index] = prod1;
                    }
                }
            }
        }
    }
    
    //Tabla M de Ejemplo
    public  void defaultMTable(){
        int fil = noTerms.size();
        int col = terms.size();
        mTable = new Production[fil][col];
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                mTable[i][j] = new Production();
            }
        }
        mTable[0][2] = prods.get(0).get(0);
        mTable[0][3] = prods.get(0).get(0);
        mTable[1][0] = prods.get(1).get(0);
        mTable[1][4] = prods.get(1).get(1);
        mTable[1][5] = prods.get(1).get(1);
        mTable[2][2] = prods.get(2).get(0);
        mTable[2][3] = prods.get(2).get(0);
        mTable[3][1] = prods.get(3).get(0);
        mTable[3][0] = prods.get(3).get(1);
        mTable[3][4] = prods.get(3).get(1);
        mTable[3][5] = prods.get(3).get(1);
        mTable[4][2] = prods.get(4).get(0);
        mTable[4][3] = prods.get(4).get(1);
    }
    
    //Imprimir Tabla M
    public  void printMTable(){
        int fil = noTerms.size();
        int col = terms.size();
        System.out.println("Tabla M");
        for (int i = 0; i < fil; i++) {
            String out = "";
            for (int j = 0; j < col-1; j++) {
                out += mTable[i][j].toString() + " \t| ";
            }
            out += mTable[i][col-1];
            System.out.println(out);
        }
        System.out.println("");
    }
    
    public  void tableGraphics(){
        
        //Dibujar Tabla                
        //DefaultTableModel tm = (DefaultTableModel) Grid.getModel();
        DefaultTableModel tm = new DefaultTableModel();
        tm.setColumnCount(terms.size()+1);
        tm.setRowCount(noTerms.size());
        Grid.setModel(tm);
        JTableHeader tableHeader = Grid.getTableHeader();
        TableColumnModel tableColumnModel = tableHeader.getColumnModel();
        TableColumn tableColumn = tableColumnModel.getColumn(0);
        tableColumn.setHeaderValue("");
        
        for (int k=1; k < tm.getColumnCount(); k++){
            tableColumn = tableColumnModel.getColumn(k);
            tableColumn.setHeaderValue(terms.get(k-1));
            //tableColumn.sizeWidthToFit();
        }
        tableHeader.repaint();
        
        for(int z=0; z<noTerms.size(); z++){
            Grid.setValueAt(noTerms.get(z), z, 0);
        }
        
        
        int fil = noTerms.size();
        int col = terms.size();
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                String out = "";
                if(!mTable[i][j].getProd().isEmpty()){
                    out += noTerms.get(i).getSymb() + " -> " + mTable[i][j].toString();
                }
                //Reemplazar la sgte linea por la asignacion en la celda del jTable (Se asigna out)
                System.out.println("M[" + noTerms.get(i).getSymb() + ", " + terms.get(j).getSymb() + "] = " + out);
                Grid.setValueAt(out, i, j+1);
            }
        }
        System.out.println(""); //Quitar
        columnFitter();
    }
    
    public void columnFitter(){
        for (int column = 0; column < Grid.getColumnCount(); column++)
        {
            TableColumn tableColumn = Grid.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < Grid.getRowCount(); row++)
            {
                TableCellRenderer cellRenderer = Grid.getCellRenderer(row, column);
                Component c = Grid.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + Grid.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                //  We've exceeded the maximum width, no need to check other rows

                if (preferredWidth >= maxWidth)
                {
                    preferredWidth = maxWidth;
                    break;
                }
            }
            tableColumn.setPreferredWidth( preferredWidth );
        }

    }
    
    //Realiza Identificacion de Cadenas
    public ArrayList<String> identify(String cad){
        
        ArrayList<String> salida = new ArrayList<String>();
        boolean sw = true;
        String entr = cad + "$";
        ArrayList<Symbol> pila = new ArrayList<>();
        pila.add(END);
        pila.add(noTerms.get(0));
        System.out.println("Pila | Entrada | Salida");
        salida.add("Pila | Entrada | Salida");
        while(sw && !getLastSymbol(pila).equals(END.getSymb())){
            String sal = "";
            String dataPila = "";
            for (Symbol pila1 : pila) {
                dataPila += pila1.getSymb();
            }
            String copyEntr = entr;
            if(arrayContains(noTerms, getLast(pila))){
                if(arrayContains(terms, new Symbol("" + entr.charAt(0), false))){
                    Production aux = mTable[noTerms.indexOf(symbolOf(noTerms, getLast(pila)))][terms.indexOf(symbolOf(terms, new Symbol("" + entr.charAt(0), false)))];
                    if(!aux.getProd().isEmpty()){
                        sal = getLastSymbol(pila);
                        pila.remove(pila.size()-1);
                        if(!aux.getFirst().getSymb().equals(EPS.getSymb())){
                            for (int i = aux.getProd().size()-1; i >= 0; i--) {
                                pila.add(aux.getSymbol(i));
                            }
                        }
                        sal += " -> " + aux.toString();
                    }else{
                        sal = "Error";
                        sw = false;
                    }
                }else{
                    sal = "Error";
                    sw = false;
                }
            }else if(getLastSymbol(pila).equals("" + entr.charAt(0))){
                pila.remove(pila.size()-1);
                entr = entr.substring(1, entr.length());
            }else{
                sal = "Error";
                sw = false;
            }
            System.out.println(dataPila + " | " + copyEntr + " | " + sal);
            salida.add(dataPila + " | " + copyEntr + " | " + sal);
        }
        if(sw){
            String dataPila = "";
            for (Symbol pila1 : pila) {
                dataPila += pila1.getSymb();
            }
            System.out.println(dataPila + " | " + entr + " | Aceptar");
            salida.add(dataPila + " | " + entr + " | Aceptar");
        }
        return salida;
    }
    
    //Obtener Ultimo Simbolo
    public  Symbol getLast(ArrayList<Symbol> arr){
        return arr.get(arr.size()-1);
    }
    
    //Obtener Ultimo String
    public  String getLastSymbol(ArrayList<Symbol> arr){
        return arr.get(arr.size()-1).getSymb();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DirField;
    private javax.swing.JTable Grid;
    private javax.swing.JTextField InputField;
    private javax.swing.JTextArea TGramaticas;
    private javax.swing.JTextArea TPrimSig;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToggleButton tablaReconToggle;
    // End of variables declaration//GEN-END:variables
}
